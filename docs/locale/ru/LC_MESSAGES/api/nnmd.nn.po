# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-07-27 14:26+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/api/nnmd.nn.rst:2
msgid "nnmd.nn"
msgstr ""

#: ../../source/api/nnmd.nn.rst:4
msgid ""
"Module `nnmd.nn` provides neural network functionalities for molecular "
"dynamics simulations."
msgstr ""
"Модуль `nnmd.nn` предоставляет функционал нейронных сетей для молекулярно-"
"динамических симуляций."

#: nnmd.nn.atomic_nn.AtomicNN:1 nnmd.nn.bpnn.BPNN:1 of
msgid "Bases: :py:class:`~torch.nn.modules.module.Module`"
msgstr "Базовые классы: :py:class:`~torch.nn.modules.module.Module`"

#: nnmd.nn.atomic_nn.AtomicNN:1 of
msgid ""
"Model implements a multilayer perceptron for one species with a single "
"output for one atom."
msgstr ""
"Модель реализует многослойный перцептрон для одного вида с одним "
"выходом для одного атома."

#: nnmd.nn.atomic_nn.AtomicNN.forward:1 of
msgid "Define the computation performed at every call."
msgstr "Определяет вычисления, выполняемые при каждом вызове."

#: nnmd.nn.atomic_nn.AtomicNN.forward:3 of
msgid "Should be overridden by all subclasses."
msgstr "Должен быть переопределен всеми подклассами."

#: nnmd.nn.atomic_nn.AtomicNN.forward:6 of
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the registered hooks "
"while the latter silently ignores them."
msgstr ""
"Хотя рецепт прямого прохода должен быть определен в этой функции, следует "
"вызвать экземпляр :class:`Module` вместо этого, поскольку первый "
"заботится о запуске зарегистрированных хуков, в то время как второй "
"тихо игнорирует их."

#: nnmd.nn.bpnn.BPNN:1 of
msgid "Class implement high-dimentional NN for system of atoms."
msgstr "Класс реализует высокоразмерную нейронную сеть для системы атомов."

#: nnmd.nn.bpnn.BPNN:3 of
msgid ""
"For each atom it defines special Atomic NN which provide machine-trained "
"potentials."
msgstr ""
"Для каждого атома он определяет специальную атомную нейронную сеть, которая "
"предоставляет машиннообученные потенциалы."
msgstr ""

#: nnmd.nn.bpnn.BPNN.config:1 of
msgid "Configures BPNN instance."
msgstr "Настраивает экземпляр BPNN."

#: ../../source/api/nnmd.nn.rst
msgid "Parameters"
msgstr "Параметры"

#: nnmd.nn.bpnn.BPNN.config:3 of
msgid "data about BPNN and its atomic subnets"
msgstr "данные о BPNN и его атомных подсетях"

#: nnmd.nn.bpnn.BPNN.fit:1 of
msgid "Train method of neural network."
msgstr "Метод обучения нейронной сети."

#: nnmd.nn.bpnn.BPNN.fit:3 of
msgid "input dataset with data about atoms"
msgstr "входной набор данных с данными об атомах"

#: nnmd.nn.bpnn.BPNN.fit:5 of
msgid "size of batch"
msgstr "размер батча"

#: nnmd.nn.bpnn.BPNN.fit:7 of
msgid "amount of training epochs"
msgstr "количество эпох обучения"

#: nnmd.nn.bpnn.BPNN.predict:1 of
msgid "Calculates energy and forces for structs of atoms"
msgstr "Вычисляет энергию и силы для структур атомов"

#: nnmd.nn.bpnn.BPNN.predict:3 of
msgid "positions of atoms"
msgstr "позиции атомов"

#: nnmd.nn.bpnn.BPNN.predict:5 of
msgid "parameters of symmetric functions"
msgstr "параметры симметричных функций"

#: nnmd.nn.bpnn.BPNN.save_model:1 of
msgid ""
"Saves trained model to file. It makes possible to load pre-trained net "
"for calculations"
msgstr ""
"Сохраняет обученную модель в файл. Это позволяет загрузить предобученную "
"сеть для расчетов"

#: nnmd.nn.dataset.TrainAtomicDataset:1 of
msgid "Bases: :py:class:`~torch.utils.data.dataset.Dataset`"
msgstr "Базовые классы: :py:class:`~torch.utils.data.dataset.Dataset`"

#: nnmd.nn.dataset.TrainAtomicDataset.make_atomic_dataset:1 of
msgid "Create atomic dataset with symmetric functions."
msgstr "Создает атомный набор данных с симметричными функциями."

#: nnmd.nn.dataset.TrainAtomicDataset.make_atomic_dataset:3 of
msgid ""
"dictionary with positions by species,             unit cell, forces and "
"velocities."
msgstr ""
"словарь с позициями по видам, ячейка, силы и скорости."

#: ../../source/api/nnmd.nn.rst
msgid "Returns"
msgstr "Возвращает"

#: nnmd.nn.dataset.TrainAtomicDataset.make_atomic_dataset:6 of
msgid "dataset with symmetric functions."
msgstr "набор данных с симметричными функциями."

#: ../../source/api/nnmd.nn.rst
msgid "Return type"
msgstr "Тип результата"

#: nnmd.nn.train_val_test_split.train_val_test_split:1 of
msgid "Split dataset into train, validation, and test sets."
msgstr "Разделяет набор данных на обучающие, валидационные и тестовые наборы."

#: nnmd.nn.train_val_test_split.train_val_test_split:3 of
msgid "dataset to split"
msgstr "набор данных для разделения"

#: nnmd.nn.train_val_test_split.train_val_test_split:5 of
msgid "ratios of train, validation, and test sets"
msgstr "соотношения обучающего, валидационного и тестового наборов"

#: nnmd.nn.train_val_test_split.train_val_test_split:8 of
msgid "train, validation"
msgstr "обучающий, валидационный"

