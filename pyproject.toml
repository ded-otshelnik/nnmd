[project]
name = "nnmd"
version = "0.1.0"
description = "ML extension with PyTorch C++ (Libtorch) and Python bindings"
readme = "README.md"
keywords = ["python", "pytorch", "libtorch", "pybind11"]
authors = [
    {name = "Andrey Budnikov"}
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: GPU :: NVIDIA CUDA :: 12 :: 12.1",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: C++",
    "Programming Language :: Python :: Implementation :: CPython"
]

[project.urls]
Homepage = "https://github.com/ded-otshelnik/nnmd"
Repository = "https://github.com/ded-otshelnik/nnmd.git"

[project.optional-dependencies]
test = [
    # dependencies of tox
    # for auto-tests
    "platformdirs==2.6.2",
    "virtualenv==20.21.1",
    "tox",
    "tox-current-env",
    "pytest",
    "mypy"
]

[build-system]
# (!) torch must be compiled first for compatibility with extension
# but it mustn't be mentioned in 'requires'
# because pip will try to download torch from web resources 
# what will break extensions and their compatibility 
requires = ["setuptools==69.5.1",
            "wheel",
            "ninja",
            "cmake>=3.11",
            "pybind11",
            "ase",
            "numpy",
            "torch"
            # # dependencies from torch
            # # must be added
            # # if "pip install ." are used
            # # for pyproject.toml-based project
            # "typing_extensions",
            # "sympy",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = [""]

[tool.pytest.ini_options]
# directory containing your tests
testpaths = "tests"  
norecursedirs = [
    ".vscode",
    "__pycache__"
]
# warnings that should be ignored
filterwarnings = [
    "ignore::DeprecationWarning"
]
# custom markers that can be used using pytest.mark
markers = [
    "slow: lower-importance tests that take an excessive amount of time",
]
addopts = [
    "--import-mode=importlib",
]

[tool.tox]
legacy_tox_ini = """
[tox]
env_list =
    pytest
    mypy
skipsdist = true

[testenv:pytest]
description = run pytest for package
deps =
    pytest
commands =
    pytest {tty:--color=yes} {posargs} -v

[testenv:mypy]
description = run mypy for package
deps =
    mypy
commands =
    mypy . --exclude samples --exclude tests --ignore-missing-imports
"""