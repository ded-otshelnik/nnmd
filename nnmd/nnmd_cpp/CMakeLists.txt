set(PROJECT_SOLUTION_NAME "nnmd_cpp" CACHE STRING "Name of the solution" FORCE)
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake" FORCE)

include(cmake/util.cmake)

project(${PROJECT_SOLUTION_NAME} LANGUAGES CXX)
enable_language(CUDA)

set(PROJECT_TARGET ${PROJECT_SOLUTION_NAME})
set(PROJECT_LIBRARY ${PROJECT_TARGET})

set(INCLUDE_DIRS "")
set(EXTERNAL_LIBS "")
set(EXTERNAL_DEPS "")
set(EXTERNAL_DLLS "")

set(PROJECT_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")
set(PROJECT_SOURCES_DIR "${PROJECT_SOURCE_DIR}/src")

include_directories(${PROJECT_SOURCE_DIR})
file(GLOB_RECURSE PROJECT_HEADERS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${PROJECT_INCLUDE_DIR}/*.hpp")
file(GLOB_RECURSE PROJECT_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${PROJECT_SOURCES_DIR}/*.cpp"
																	   "${PROJECT_SOURCES_DIR}/*.cu"
)

set(PROJECT_LIBRARY_TYPE "SHARED" CACHE STRING "Library type to build.")
set_property(CACHE PROJECT_LIBRARY_TYPE PROPERTY STRINGS SHARED STATIC)

add_compile_definitions(_GLIBCXX_USE_CXX11_ABI=1)
add_compile_options(-fopenmp -Wall)

set(CAFFE2_USE_CUDNN ON)
set(CAFFE2_USE_CUSPARSELT ON)
find_package(Torch REQUIRED)
list(APPEND INCLUDE_DIRS  "${TORCH_INCLUDE_DIRS}")
list(APPEND EXTERNAL_LIBS "${TORCH_LIBRARIES}")
list(APPEND EXTERNAL_DLLS "${TORCH_DLLS}")
list(APPEND EXTERNAL_DEPS "torch")

find_package(pybind11 CONFIG REQUIRED)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}")

pybind11_add_module(${PROJECT_TARGET}
        ${pybind11_INCLUDE_DIRS}
        ${PROJECT_HEADERS}
        ${PROJECT_SOURCES}
        ${TORCH_INCLUDE_DIRS}
)

find_library(TORCH_PYTHON_LIBRARY torch_python PATHS "${TORCH_INSTALL_PREFIX}/lib")
list(APPEND EXTERNAL_LIBS ${TORCH_PYTHON_LIBRARY})

remove_definitions(-DNO_PYTHON)

set_property(TARGET ${PROJECT_TARGET} PROPERTY CXX_STANDARD 17)
set_property(TARGET ${PROJECT_TARGET} PROPERTY OUTPUT_NAME "${PROJECT_TARGET}")
set_target_properties(${PROJECT_TARGET} PROPERTIES PUBLIC_HEADER "${PROJECT_HEADERS}")
target_include_directories(${PROJECT_TARGET} PUBLIC ${INCLUDE_DIRS} ${PROJECT_INCLUDE_DIR})
target_link_libraries(${PROJECT_TARGET} PUBLIC ${EXTERNAL_LIBS})

message( "===========================================")
message_pkg_refs("${PROJECT_TARGET}" "${PROJECT_DEFINES}" "${PROJECT_HEADERS}" "${PROJECT_SOURCES}"
                 "${EXTERNAL_DEPS}" "${EXTERNAL_LIBS}" "${EXTERNAL_DLLS}")
message( "===========================================")

include(GNUInstallDirs)
install(TARGETS ${PROJECT_SOLUTION_NAME}
		EXPORT ${PROJECT_TARGET}Config
		PUBLIC_HEADER DESTINATION include/${PROJECT_TARGET}
		INCLUDES DESTINATION include/${PROJECT_TARGET}
		ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
		LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

export(PACKAGE ${PROJECT_TARGET})